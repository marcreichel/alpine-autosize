{"version":3,"file":"alpine-autosize.min.js","sources":["../builds/cdn.js","../src/index.js"],"sourcesContent":["import autosize from '../src/index.js';\n\ndocument.addEventListener('alpine:init', () => {\n    autosize(window.Alpine);\n});\n","function Autosize(Alpine) {\n    Alpine.directive(\"autosize\", (el, {modifiers}, {cleanup}) => {\n        const attributes = Array.from(el.attributes);\n\n        let hasWireModel = false;\n\n        for (let {nodeName} of attributes) {\n            if (nodeName === \"wire:model\" || nodeName.startsWith(\"wire:model.\")) {\n                hasWireModel = true;\n                break;\n            }\n        }\n\n        if (!el.hasAttribute(\"wire:ignore\") && hasWireModel) {\n            el.setAttribute(\"wire:ignore\", \"\");\n        }\n\n        const previousResizeValue = el.style.resize;\n        el.style.resize = \"none\";\n\n        const previousMinHeight = el.style.minHeight;\n        el.style.minHeight = `${el.getBoundingClientRect().height}px`;\n\n        const paddingModifier =\n            modifiers.filter((modifier) => modifier.match(/px$/i))[0] || false;\n        let padding = 0;\n        if (paddingModifier !== false) {\n            padding = parseInt(paddingModifier);\n        }\n\n        const handler = () => {\n            if (!el.scrollHeight) {\n                return;\n            }\n            el.style.height = \"4px\";\n            el.style.height = `${el.scrollHeight + padding}px`;\n        };\n\n        handler();\n\n        el.addEventListener(\"input\", handler);\n        el.addEventListener(\"autosize\", handler);\n\n        cleanup(() => {\n            el.style.resize = previousResizeValue;\n            el.style.minHeight = previousMinHeight;\n            el.removeEventListener(\"input\", handler);\n            el.removeEventListener(\"autosize\", handler);\n        });\n    });\n\n    Alpine.magic(\"autosize\", (node) => (el) => {\n        const element = el || node;\n        element.dispatchEvent(new Event(\"autosize\"));\n    });\n}\n\nexport default Autosize;\n"],"names":["document","addEventListener","Alpine","window","directive","el","modifiers","cleanup","attributes","Array","from","hasWireModel","nodeName","startsWith","hasAttribute","setAttribute","previousResizeValue","style","resize","previousMinHeight","minHeight","getBoundingClientRect","height","paddingModifier","filter","modifier","match","padding","parseInt","handler","scrollHeight","removeEventListener","magic","node","dispatchEvent","Event"],"mappings":"2FAEAA,SAASC,iBAAiB,eAAe,KCFzC,IAAkBC,GAAAA,EDGLC,OAAOD,QCFTE,UAAU,YAAY,CAACC,GAAKC,UAAAA,IAAaC,QAAAA,YACtCC,EAAaC,MAAMC,KAAKL,EAAGG,gBAE7BG,GAAe,MAEd,IAAIC,SAACA,KAAaJ,KACF,eAAbI,GAA6BA,EAASC,WAAW,eAAgB,CACjEF,GAAe,SAKlBN,EAAGS,aAAa,gBAAkBH,GACnCN,EAAGU,aAAa,cAAe,UAG7BC,EAAsBX,EAAGY,MAAMC,OACrCb,EAAGY,MAAMC,OAAS,aAEZC,EAAoBd,EAAGY,MAAMG,UACnCf,EAAGY,MAAMG,UAAa,GAAEf,EAAGgB,wBAAwBC,iBAE7CC,EACFjB,EAAUkB,QAAQC,GAAaA,EAASC,MAAM,UAAS,KAAM,MAC7DC,EAAU,GACU,IAApBJ,IACAI,EAAUC,SAASL,UAGjBM,EAAU,KACPxB,EAAGyB,eAGRzB,EAAGY,MAAMK,OAAS,MAClBjB,EAAGY,MAAMK,OAAU,GAAEjB,EAAGyB,aAAeH,QAG3CE,IAEAxB,EAAGJ,iBAAiB,QAAS4B,GAC7BxB,EAAGJ,iBAAiB,WAAY4B,GAEhCtB,GAAQ,KACJF,EAAGY,MAAMC,OAASF,EAClBX,EAAGY,MAAMG,UAAYD,EACrBd,EAAG0B,oBAAoB,QAASF,GAChCxB,EAAG0B,oBAAoB,WAAYF,SAI3C3B,EAAO8B,MAAM,YAAaC,GAAU5B,KAChBA,GAAM4B,GACdC,cAAc,IAAIC,MAAM"}