{"version":3,"file":"alpine-autosize.min.js","sources":["../builds/cdn.ts","../src/index.ts"],"sourcesContent":["import autosize from '../src/index';\n\ndocument.addEventListener('alpine:init', (): void => {\n    autosize((<any>window).Alpine);\n});\n","function Autosize(Alpine: any): void {\n    Alpine.directive(\n        'autosize',\n        (\n            el: HTMLElement,\n            { modifiers }: { modifiers: string[] },\n            { cleanup }: { cleanup: (callback: () => void) => void },\n        ): void => {\n            const attributes: Attr[] = Array.from(el.attributes);\n\n            let hasWireModel: boolean = false;\n\n            for (let { nodeName } of attributes) {\n                if (\n                    nodeName === 'wire:model' ||\n                    nodeName.startsWith('wire:model.')\n                ) {\n                    hasWireModel = true;\n                    break;\n                }\n            }\n\n            if (!el.hasAttribute('wire:ignore') && hasWireModel) {\n                el.setAttribute('wire:ignore', '');\n            }\n\n            const previousResizeValue: string = el.style.resize;\n            el.style.resize = 'none';\n\n            const previousMinHeight: string = el.style.minHeight;\n            el.style.minHeight = `${el.getBoundingClientRect().height}px`;\n\n            const paddingModifier =\n                modifiers.filter((modifier) => modifier.match(/px$/i))[0] ||\n                false;\n            let padding: number = 0;\n            if (paddingModifier !== false) {\n                padding = parseInt(paddingModifier);\n            }\n\n            const handler: (event: Partial<Event>) => void = (\n                event: Partial<Event>,\n            ) => {\n                const element: HTMLElement = <HTMLElement>event.target;\n                if (!element.scrollHeight) {\n                    return;\n                }\n                element.style.height = '4px';\n                element.style.height = `${element.scrollHeight + padding}px`;\n            };\n\n            handler({ target: el });\n\n            el.addEventListener('input', handler);\n\n            cleanup((): void => {\n                el.style.resize = previousResizeValue;\n                el.style.minHeight = previousMinHeight;\n                el.removeEventListener('input', handler);\n            });\n        },\n    );\n}\n\nexport default Autosize;\n"],"names":["document","addEventListener","window","Alpine","directive","el","_a","_b","modifiers","cleanup","hasWireModel","attributes_1","Array","from","attributes","_i","nodeName","startsWith","hasAttribute","setAttribute","previousResizeValue","style","resize","previousMinHeight","minHeight","getBoundingClientRect","height","paddingModifier","filter","modifier","match","padding","parseInt","handler","event","element","target","scrollHeight","removeEventListener"],"mappings":"2FAEAA,SAASC,iBAAiB,eAAe,WACtBC,OAAQC,OCFhBC,UACH,YACA,SACIC,EACAC,EACAC,GAMA,QAPEC,cACAC,YAIEC,GAAwB,MAEHC,EAJEC,MAAMC,KAAKR,EAAGS,YAIhBC,WAAAA,IAAY,CAA1B,IAAAC,gBACP,GACiB,eAAbA,GACAA,EAASC,WAAW,eACtB,CACEP,GAAe,EACf,QAIHL,EAAGa,aAAa,gBAAkBR,GACnCL,EAAGc,aAAa,cAAe,IAGnC,IAAMC,EAA8Bf,EAAGgB,MAAMC,OAC7CjB,EAAGgB,MAAMC,OAAS,OAElB,IAAMC,EAA4BlB,EAAGgB,MAAMG,UAC3CnB,EAAGgB,MAAMG,UAAY,UAAGnB,EAAGoB,wBAAwBC,aAEnD,IAAMC,EACFnB,EAAUoB,QAAO,SAACC,GAAa,OAAAA,EAASC,MAAM,WAAS,KACvD,EACAC,EAAkB,GACE,IAApBJ,IACAI,EAAUC,SAASL,IAGvB,IAAMM,EAA2C,SAC7CC,GAEA,IAAMC,EAAoCD,EAAME,OAC3CD,EAAQE,eAGbF,EAAQd,MAAMK,OAAS,MACvBS,EAAQd,MAAMK,OAAS,UAAGS,EAAQE,aAAeN,UAGrDE,EAAQ,CAAEG,OAAQ/B,IAElBA,EAAGJ,iBAAiB,QAASgC,GAE7BxB,GAAQ,WACJJ,EAAGgB,MAAMC,OAASF,EAClBf,EAAGgB,MAAMG,UAAYD,EACrBlB,EAAGiC,oBAAoB,QAASL"}